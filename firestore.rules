rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthed() { return request.auth != null; }
    function isHost(room) { return isAuthed() && room.data.hostUid == request.auth.uid; }

    // Rooms collection
    match /rooms/{code} {
      allow read: if isAuthed();

      // Create room: only by authed users creating a new room doc
      allow create: if isAuthed() && request.resource.data.hostUid == request.auth.uid;

      // Update restricted fields: only host can change status/round/phase/timers/maxPlayers
      allow update: if isHost(resource) &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','round','phase','phaseStartAt','phaseEndsAt','maxPlayers']);

      // No deletes from clients
      allow delete: if false;

      // Players subcollection
      match /players/{uid} {
        allow read: if isAuthed();

        // Players can create or update only their own player doc
        allow create, update: if isAuthed() && uid == request.auth.uid;

        // No deletes from clients for now
        allow delete: if false;
      }
    }

    // Deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
