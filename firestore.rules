rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthed() { return request.auth != null; }
    function isHost(room) { return isAuthed() && room.data.hostUid == request.auth.uid; }

    // Rooms collection
    match /rooms/{code} {
      allow read: if isAuthed();

      // Create room: only by authed users creating a new room doc
      allow create: if isAuthed() && request.resource.data.hostUid == request.auth.uid;

      // Update restricted fields: only host can change status/round/phase/timers/maxPlayers
      allow update: if isHost(resource) &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','round','phase','phaseStartAt','phaseEndsAt','maxPlayers']);

      // No deletes from clients
      allow delete: if false;

      // Players subcollection
      match /players/{uid} {
        allow read: if isAuthed();

        // Players can create or update only their own player doc
        allow create, update: if isAuthed() && uid == request.auth.uid;

        // No deletes from clients for now
        allow delete: if false;
      }

      // Round 1 sentences subcollection
      match /r1_sentences/{id} {
        allow read: if isAuthed();
        allow create: if isAuthed() &&
          request.resource.data.authorUid == request.auth.uid &&
          request.resource.data.textTemplate is string &&
          request.resource.data.blanksCount is int &&
          request.resource.data.blanksCount >= 1 && request.resource.data.blanksCount <= 2;
        allow update, delete: if false; // immutable from clients
      }

      // Round 1 fills subcollection
      match /r1_fills/{id} {
        allow read: if isAuthed();
        allow create: if isAuthed() &&
          request.resource.data.fillerUid == request.auth.uid &&
          request.resource.data.baseSentenceId is string &&
          request.resource.data.values is list &&
          request.resource.data.values.size() >= 1 && request.resource.data.values.size() <= 2;
        allow update, delete: if false; // immutable from clients
      }

      // Round 1 assignments subcollection (host writes only)
      match /r1_assignments/{uid} {
        allow read: if isAuthed();
        allow create: if isHost(resource.parent());
        allow update, delete: if false;
      }
    }

    // Deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
